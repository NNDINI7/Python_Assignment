# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zaxxTGW20JkpwXNdJ3s9O4RzDNDFOZOh

Task Description
Write a Python program that:

● Accepts a list of city names from the user.

● Uses the OpenWeatherMap API (or any mock API if you're offline) to fetch weather data.

● Filters out cities where the temperature is above 30°C.

● Stores city names and their temperature in a list of tuples.

● Converts the final list to a set of unique city names.

● Displays results using slicing, indexing, and looping with conditions.

● Handles network errors and invalid city names gracefully.

● Uses functions for modular design.

● Uses list comprehension to extract hot cities.

Once you prepare this solution then based on solution give below answers
1. Write a function to clean and process a comma-separated list of cities.

2. Write a try-except block to handle errors from an API call.

3. Use list comprehension to filter based on a condition.

4. Store temperature data using tuples and access it using indexing/slicing.

5. Use sets to get unique entries.

6. Write logic using loops and conditions to classify temperatures.

7. Add debugging prints or pdb.set_trace() for stepwise inspection.

#Name : Nandini Giri
#Batch : Batch 4
#Roll no : 68
#AIML
"""

pip install requests

# the list of city names
city_names = input("Enter city names : ").split()
print("You entered the following cities:")
print(city_names)

import requests
from google.colab import userdata

WEATHERAPI_KEY = userdata.get('WEATHERAPI_KEY')
base_url = "http://api.weatherapi.com/v1/current.json"

weather_data = {}
city_names = ['Nagpur', 'Chicago', 'Pune']

for city in city_names:
  params = {
      'key': WEATHERAPI_KEY,
      'q': city
  }
  try:
    response = requests.get(base_url, params=params)
    response.raise_for_status()
    weather_data[city] = response.json()
  except requests.exceptions.RequestException as e:
    print(f"Error fetching weather data for {city}: {e}")

print("Weather data fetched:")
print(weather_data)
# Cities with temperature > 30°C
hot_cities = {c: d for c, d in weather_data.items() if d and 'current' in d and d['current'].get('temp_c', 0) > 30}
print("\nCities with temperature above 30°C:" if hot_cities else "No cities found with temperature above 30°C.")
display(hot_cities)

# City names and temperatures
ct = [(c, d['current']['temp_c']) for c, d in weather_data.items() if d and 'current' in d and 'temp_c' in d['current']]
print("\nCity Names and Temperatures")
print(ct)
display(ct)

# Unique city names
unique_cities = {c for c, _ in ct}
print("\nUnique City Names")
print(unique_cities)
display(unique_cities)

# First two cities
print("\nFirst few cities and their temperatures:")
print(ct[:2])

# Check Chicago temperature
ct_dict = dict(ct)
print(f"\nTemperature in Chicago: {ct_dict['Chicago']}°C" if 'Chicago' in ct_dict else "\nChicago not found in the list.")

# Cities with "rain" in condition
print("\nCities with 'rain' in their weather condition:")
rain_cities = [(c, d['current']['temp_c'], d['current']['condition']['text'])
               for c, d in weather_data.items()
               if d and 'current' in d and 'condition' in d['current'] and 'text' in d['current']['condition']
               and 'rain' in d['current']['condition']['text'].lower()]

if rain_cities:
    for c, t, cond in rain_cities:
        print(f"Weather in {c}: {t}°C, {cond}")
else:
    print("No cities found with 'rain' in their weather condition.")

# Hot cities (above 30°C) using list comprehension
hot_city_list = [c for c, d in weather_data.items() if d and 'current' in d and d['current'].get('temp_c', 0) > 30]
print("\nHot Cities (above 30°C):")
print(hot_city_list)

"""questions solution:

Write a function to clean and process a comma-separated list of cities.
"""

# the list of city names
city_names = input("Enter city names : ").split()
print("You entered the following cities:")
print(city_names)

"""Write a try-except block to handle errors from an API call."""

def get_weather_data(cities, api_key, base_url):
  """Fetches weather data for a list of cities using the WeatherAPI.com."""
  weather_data = {}
  for city in cities:
    params = {
        'key': api_key,
        'q': city
    }
    try:
      response = requests.get(base_url, params=params)
      response.raise_for_status()
      weather_data[city] = response.json()
    except requests.exceptions.RequestException as e:
      print(f"Error fetching weather data for {city}: {e}")
  return weather_data

"""Use list comprehension to filter based on a condition."""

# Hot cities (above 30°C) using list comprehension
hot_city_list = [c for c, d in weather_data.items() if d and 'current' in d and d['current'].get('temp_c', 0) > 30]
print("\nHot Cities (above 30°C):")
print(hot_city_list)

"""Store temperature data using tuples and access it using indexing/slicing."""

# First two cities
print("\nFirst few cities and their temperatures:")
print(ct[:2])

# Check Chicago temperature
ct_dict = dict(ct)
print(f"\nTemperature in Chicago: {ct_dict['Chicago']}°C" if 'Chicago' in ct_dict else "\nChicago not found in the list.")

# Cities with "rain" in condition
print("\nCities with 'rain' in their weather condition:")
rain_cities = [(c, d['current']['temp_c'], d['current']['condition']['text'])
               for c, d in weather_data.items()
               if d and 'current' in d and 'condition' in d['current'] and 'text' in d['current']['condition']
               and 'rain' in d['current']['condition']['text'].lower()]

if rain_cities:
    for c, t, cond in rain_cities:
        print(f"Weather in {c}: {t}°C, {cond}")
else:
    print("No cities found with 'rain' in their weather condition.")

"""Use sets to get unique entries."""

# Unique city names
unique_cities = {c for c, _ in ct}
print("\nUnique City Names")
print(unique_cities)
display(unique_cities)

"""Write logic using loops and conditions to classify temperatures."""

# City names and temperatures
ct = [(c, d['current']['temp_c']) for c, d in weather_data.items() if d and 'current' in d and 'temp_c' in d['current']]
print("\nCity Names and Temperatures")
print(ct)
display(ct)

"""Add debugging prints or pdb.set_trace() for stepwise inspection."""

print("\n--- Debugging: Inspecting Weather Data per City ---")
for city, data in weather_data.items():
  print(f"\nProcessing data for {city}:")
  print(data)

